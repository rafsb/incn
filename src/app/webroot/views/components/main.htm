<template>
    <div class="-bar -left --config" style="width:calc(100% - 6em);padding: .5em 0">
        <main class="-wrapper" style="background:@FOREGROUND;color:@LIME;border-radius:.5em;">
            <div class="-wrapper" style="height:calc(100% - 6em)">
                <div class='-bar -left -row -scrolls' style="padding:.5em">
                    <div class='-row --stage -scrolls' style="height:70%;padding: 1em 4em"></div>

                    <!-- FLOATING -->
                    <div class="-absolute -zero -hover" style="top:25%;padding:.25em;opacity:.32;transform:translateY(-50%)">
                        <!-- BACK TO TOP -->
                        <div class="-pointer" style="background:@FONT22;border-radius:1.5em;height:3em;width:3em;margin:.25em;transform:rotate(90deg)"  onclick="{
                                const wrap = this.upFind('-wrapper'), stag = wrap.$('.--stage')[0] ;;
                                stag.scrollTo({ top: 0, behavior: 'smooth' })
                            }">
                            <img src="assets/img/icons/forward.svg" class="-inverted -centered" style="height:1em;">
                        </div>
                        <br>
                        <!-- BACK TO TOP -->
                        <div class="-pointer" style="background:@FONT22;border-radius:1.5em;height:3em;width:3em;margin:.25em;transform:rotate(90deg)"  onclick="{
                                const wrap = this.upFind('-wrapper'), stag = wrap.$('.--stage')[0], rows = wrap.$('.--tile-row.--user') ;;
                                let i = 0 ;;
                                while(rows[i] && rows[i].getBoundingClientRect().y<100) ++i
                                if(rows[i-2]) stag.scrolls(rows[i-2])
                            }">
                            <img src="assets/img/icons/nav-back.svg" class="-inverted -centered" style="height:1em;">
                        </div>
                        <br>
                        <div class="-pointer" style="background:@FONT22;border-radius:1.5em;height:3em;width:3em;margin:.25em;transform:rotate(-90deg)" onclick="{
                                const wrap = this.upFind('-wrapper'), stag = wrap.$('.--stage')[0], rows = wrap.$('.--tile-row.--user') ;;
                                let i = 0 ;;
                                while(rows[i] && rows[i].getBoundingClientRect().y<100) ++i
                                if(rows[i]) stag.scrolls(rows[i])
                            }">
                            <img src="assets/img/icons/nav-back.svg" class="-inverted -centered" style="height:1em;">
                        </div>
                        <br>
                        <!-- GO TO BOTTOM -->
                        <div class="-pointer" style="background:@FONT22;border-radius:1.5em;height:3em;width:3em;margin:.25em;transform:rotate(-90deg)"  onclick="{
                            const wrap = this.upFind('-wrapper'), stag = wrap.$('.--stage')[0] ;;
                            stag.scrollTo({ top: Number.MAX_SAFE_INTEGER, behavior: 'smooth' })
                        }">
                            <img src="assets/img/icons/forward.svg" class="-inverted -centered" style="height:1em;">
                        </div>
                    </div>
                    <div class='-row --ai -flex' style="height:30%;background:@BACKGROUND;border-radius: 0.5em;padding-right:.5em">
                        <div class="-col-11 -left -bar" style="padding:.5em">
                            <textarea height="100%" data-storage='actor_preset' class="-row --ai-system" style="height:calc(20% - .5em);margin-bottom:.5em" placeholder="act like a king!"></textarea>
                            <textarea height="100%" data-storage='question' class="-row --ai-user" style="height:calc(80% - .5em);margin-bottom:.5em" placeholder="hello world!"></textarea>
                        </div>
                        <div class="-col-1 -bar -left">
                            <button class="-pointer -col-10 -centered --ai-sender" style="color:@FONT;background:@GREEN_SEA;padding:.5em;border-radius:.5em" onclick="

                                const
                                system = this.parent(2).$('textarea')[0].value.trim()
                                , v = this.parent(2).$('textarea')[1].value.trim()
                                ;;
                                this.parent(2).$('textarea')[1].value = ''
                                if(!v) fw.warning('Missing message ...')
                                else {
                                    const data = fw.get('.--config form')[0].json() ;;
                                    Object.keys(data).forEach(k => !isNaN(data[k]) ? data[k]/=10 : null)
                                    if(!data.messages) data.messages = []
                                    fw.get('.--tile-row .--message').map(e => {
                                        const role = e.dataset.role ;;
                                        const content = e.textContent ;;
                                        return { role, content }
                                    }).reverse().slice(0, 10).reverse().forEach(message => {
                                        if(data.messages.reduce((x, e) => x += e.content.length, 0)/4 < 2048) data.messages.push(message)
                                    })
                                    data.messages = [ { role:'system', content: system || 'you are a helpfull assistant' } ].concat(data.messages).concat([ { role:'user', content: v } ])
                                    sock('ai/chat', { data: {data}, callback: res => {
                                        if(res?.response?.error) {
                                            makeframe(res.response.error.code, res.response.error.message, '@BACKGROUND').$('div')[0].css({ border: '.25em solid @ALIZARIN' })
                                            return
                                        }
                                        try {
                                            let cost = 0.002 / 1000 * (res?.response?.usage?.total_tokens||0) ;;
                                            let acc = (fw.storage('acc')*1 || 0) + cost ;;
                                            fw.storage('acc', acc)
                                            makeframe(fdate.as() + ` (tokens: ${res?.response?.usage?.total_tokens||'n/c'}, cost U$: ${cost.toFixed(6)}, accumulated U$: ${acc.toFixed(3)}`, res.response.choices[0].message.content, '@BACKGROUND')
                                        } catch(e) {
                                            console.trace(e);
                                            fw.warning('No response from request ...')
                                        }
                                    } })
                                    makeframe(fdate.as('Y-m-d h:i:s'), v, '@WET_ASPHALT', role='user')
                                }
                            ">Enviar</button>
                        </div>
                    </div>
                </div>

            </div>
            <div class='-row -scrolls --stream' style="font-weight:lighter;background:@DARK4;color:@LIME;padding:.5em;height:6em"></div>
        </main>
    </div>
    <div class='-fixed -zero -row' style="padding:.125em"><div class='-left --progress' style="height:.25em;background:@LIME;width:0"></div></div>
    <style>
        .--config input[type=text], .--config select, .--config textarea {
            width:100%;
            color:@FONTAA;
            padding:.5em;
            background:@FONT0F;
            border:none;
            border-radius:.5em;
        }
        .--config select option {
            background-color: @BACKGROUND;
        }

        .--config input[type=range] {
            -webkit-appearance: none;
            width: 100%;
            height: 1em;
            background: @FONT12;
            outline: none;
            border-radius:.5em;
        }
        .--config input[type=range]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 1em;
            height: 1em;
            background: @FONTAA;
            cursor: pointer;
            border-radius:.5em
        }
        .--config input[type=range]::-moz-range-thumb {
            width: 1em;
            height: 1em;
            background: @FONTAA;
            cursor: pointer;
            border-radius:.5em
        }
        .--stream {
            font-family:Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace;
        }

    </style>
    <script>
        (function(){
            fw.load('views/components/settings.htm', null, $('#home')[0])
            const e = $("textarea.--ai-system")[0] ;;
            const tmp = fw.storage(e.dataset.storage) ;;
            if(tmp) e.value = tmp
            e.on('change', function() { fw.storage(this.dataset.storage, this.value) })
            $('textarea.--ai-user')[0].on('keydown', function(k) {
                const code = (k.keyCode||k.which) ;;
                if(code == 13 && this.lk == 17) $('button.--ai-sender')[0].dispatchEvent(new Event('click'))
                this.lk = code
            }).on('change', function(){ fw.storage('aiuser', this.value) }).value = fw.storage('aiuser')
        })()
    </script>
</template>